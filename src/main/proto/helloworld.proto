// Copyright 2015 The gRPC Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// https://raw.githubusercontent.com/grpc/grpc-java/master/examples/src/main/proto/helloworld.proto

syntax = "proto3";

option java_multiple_files = true;
option java_outer_classname = "MyProjectProto";
option objc_class_prefix = "MyP";
option java_package = "my.project";
package project;

// Reference https://grpc.io/docs/what-is-grpc/core-concepts/

service MyService1 {
	// Unary RPCs where the client sends a single request to
	// the server and gets a single response back, just like
	// a normal function call.
	rpc totalFloor (MsgRequest) returns (MsgReply) {}
	
	rpc percentageFloor (stream MsgRequest) returns (MsgReply) {}
	
	rpc changeLights (stream MsgRequest) returns (MsgReply) {}
	
}

service MyService2 {
	// Server streaming RPCs where the client sends a request
	// to the server and gets a stream to read a sequence of
	// messages back
	rpc function1Service2 (MsgRequest) returns (stream MsgReply) {}
 
 	// Client streaming RPCs where the client writes a sequence
 	// of messages and sends them to the server
 	rpc function2Service2 (stream MsgRequest) returns (MsgReply) {}
 	
 	rpc addLocation (MsgRequest) returns (MsgReply) {}
 	rpc deleteLocation (MsgRequest) returns (MsgReply) {}
 	rpc specialSpot (stream MsgRequest) returns (stream MsgReply) {}
}

service MyService3 {
	// Bidirectional streaming RPCs where both sides send a
	// sequence of messages using a read-write stream
	rpc function1Service3 (stream MsgRequest) returns (stream MsgReply) {}
	
 	rpc freeSpots (stream MsgRequest) returns (stream MsgReply) {}
 	rpc countTime (MsgRequest) returns (stream MsgReply) {}
 	rpc payment (MsgRequest) returns (MsgReply) {}
}

// The request message containing the user's name.
message MsgRequest {
  	string message = 1;
}

// The response message containing the greetings
message MsgReply {
  string message = 1;
}
